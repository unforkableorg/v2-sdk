{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh } from '@uniswap/sdk-core'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { babylonianSqrt, BigintIsh, ChainId, Price, Token, TokenAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    return getCreate2Address(\n      FACTORY_ADDRESS,\n      keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n      INIT_CODE_HASH\n    )\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(\n        babylonianSqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = babylonianSqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = babylonianSqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId, Currency, ETHER, Price, Token, WETH9 } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n\n  public get midPrice(): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH9[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH9[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH9[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  currencyEquals,\n  ETHER,\n  Fraction,\n  Percent,\n  Price,\n  Token,\n  TokenAmount,\n  TradeType,\n  WETH9\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { sortedInsert } from '../utils'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH9 token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH9[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH9[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = new Route(nextPairs, route.input).midPrice\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { CurrencyAmount, ETHER, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","invariant","parseBigintIsh","bigintIsh","sortedInsert","items","add","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Pair","tokenAmountA","tokenAmountB","tokenAmounts","token","sortsBefore","liquidityToken","Token","chainId","tokenA","tokenB","tokens","getCreate2Address","keccak256","pack","involvesToken","equals","token0","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","raw","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","outputAmount","TokenAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","liquidity","babylonianSqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","Route","pairs","input","output","every","pair","ETHER","WETH9","path","entries","i","currentInput","prices","currency","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","exactQuote","slippage","Percent","inputOutputComparator","a","b","currencyEquals","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","wrappedAmount","currencyAmount","wrappedCurrency","Trade","amount","tradeType","amounts","Array","nextPairs","TradeType","EXACT_INPUT","nextPair","CurrencyAmount","ether","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","quotient","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}